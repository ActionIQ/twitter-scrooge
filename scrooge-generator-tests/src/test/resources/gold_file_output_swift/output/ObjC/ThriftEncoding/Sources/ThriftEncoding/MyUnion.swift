//
// Automatically @generated by Scrooge
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import Foundation
import TwitterApacheThrift
@objc(TESTMyUnion)
@objcMembers
public class MyUnion: NSObject, ThriftCodable {
    public enum Union: ThriftCodable, Hashable {
        case unionClassA(UnionClassA)
        case unionClassB(UnionClassB)
        enum CodingKeys: Int, CodingKey {
            case unionClassA = 1
            case unionClassB = 2
        }
        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            if let decodedClass = try container.decodeIfPresent(UnionClassA.self, forKey: .unionClassA) {
                 self = .unionClassA(decodedClass)
            } else if let decodedClass = try container.decodeIfPresent(UnionClassB.self, forKey: .unionClassB) {
                 self = .unionClassB(decodedClass)
            } else {
                 throw DecodingError.valueNotFound(MyUnion.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "MyUnion not decodable"))
            }
        }
        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case .unionClassA(let codedClass):
               try container.encode(codedClass, forKey: .unionClassA)
            case .unionClassB(let codedClass):
               try container.encode(codedClass, forKey: .unionClassB)
            }
        }
    }
    public let value: Union
    public init(unionClassA value: UnionClassA) {
        self.value = .unionClassA(value)
    }
    public init(unionClassB value: UnionClassB) {
        self.value = .unionClassB(value)
    }
    required public init(from decoder: Decoder) throws {
        self.value = try Union(from: decoder)
    }
    public func encode(to encoder: Encoder) throws {
        try self.value.encode(to: encoder)
    }
    public override var hash: Int {
        var hasher = Hasher()
        hasher.combine(self.value)
        return hasher.finalize()
    }
    public override func isEqual(_ object: Any?) -> Bool {
        guard let other = object as? Self else {
            return false
        }
        return self.value == other.value
    }
    public var unionClassA: UnionClassA? {
        guard case .unionClassA(let value) = self.value else {
            return nil
        }
        return value
    }
    public var unionClassB: UnionClassB? {
        guard case .unionClassB(let value) = self.value else {
            return nil
        }
        return value
    }
}
