//
// Autogenerated by Scrooge
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import Foundation
import TwitterApacheThrift
public enum TestUnion: ThriftCodable, Hashable {
  case anInt(Int32)
  case aString(String)
  case aSet(Set<String>)
  case day(Day)
  enum CodingKeys: Int, CodingKey {
    case anInt = 1
    case aString = 2
    case aSet = 3
    case day = 4
  }
  public init(anInt value: Int32) {
      self = .anInt(value)
  }
  public init(aString value: String) {
      self = .aString(value)
  }
  public init(aSet value: Set<String>) {
      self = .aSet(value)
  }
  public init(day value: Day) {
      self = .day(value)
  }
  public init(from decoder: Decoder) throws {
      let container = try decoder.container(keyedBy: CodingKeys.self)
      if let decodedClass = try container.decodeIfPresent(Int32.self, forKey: .anInt) {
        self = .anInt(decodedClass)
      } else if let decodedClass = try container.decodeIfPresent(String.self, forKey: .aString) {
        self = .aString(decodedClass)
      } else if let decodedClass = try container.decodeIfPresent(Set<String>.self, forKey: .aSet) {
        self = .aSet(decodedClass)
      } else if let decodedClass = try container.decodeIfPresent(Day.self, forKey: .day) {
        self = .day(decodedClass)
      } else {
        throw DecodingError.valueNotFound(TestUnion.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "TestUnion not decodable"))
     }
  }
  public func encode(to encoder: Encoder) throws {
     var container = encoder.container(keyedBy: CodingKeys.self)
     switch self {
     case .anInt(let codedClass):
        try container.encode(codedClass, forKey: .anInt)
     case .aString(let codedClass):
        try container.encode(codedClass, forKey: .aString)
     case .aSet(let codedClass):
        try container.encode(codedClass, forKey: .aSet)
     case .day(let codedClass):
        try container.encode(codedClass, forKey: .day)
     }
  }
}
