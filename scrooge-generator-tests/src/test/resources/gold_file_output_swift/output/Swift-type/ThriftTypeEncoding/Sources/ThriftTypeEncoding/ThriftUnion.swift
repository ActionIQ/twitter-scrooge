//
// Automatically @generated by Scrooge
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import Foundation
import TwitterApacheThrift
public enum ThriftUnion: ThriftCodable, Hashable {
  case intValue(Int32)
  case enumValue(ThriftEnum)
  enum CodingKeys: Int, CodingKey {
    case intValue = 1
    case enumValue = 2
  }
  public init(intValue value: Int32) {
      self = .intValue(value)
  }
  public init(enumValue value: ThriftEnum) {
      self = .enumValue(value)
  }
  public init(from decoder: Decoder) throws {
      let container = try decoder.container(keyedBy: CodingKeys.self)
      if let decodedClass = try container.decodeIfPresent(Int32.self, forKey: .intValue) {
        self = .intValue(decodedClass)
      } else if let decodedClass = try container.decodeIfPresent(ThriftEnum.self, forKey: .enumValue) {
        self = .enumValue(decodedClass)
      } else {
        throw DecodingError.valueNotFound(ThriftUnion.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "ThriftUnion not decodable"))
     }
  }
  public func encode(to encoder: Encoder) throws {
     var container = encoder.container(keyedBy: CodingKeys.self)
     switch self {
     case .intValue(let codedClass):
        try container.encode(codedClass, forKey: .intValue)
     case .enumValue(let codedClass):
        try container.encode(codedClass, forKey: .enumValue)
     }
  }
}
