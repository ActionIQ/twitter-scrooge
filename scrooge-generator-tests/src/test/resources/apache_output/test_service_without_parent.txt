/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.twitter.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

import com.twitter.scrooge.TReusableBuffer;
import com.twitter.scrooge.TReusableMemoryTransport;
import com.twitter.util.Future;
import com.twitter.util.Function;
import com.twitter.util.Function2;
import com.twitter.util.Try;
import com.twitter.util.Return;
import com.twitter.util.Throw;
import com.twitter.finagle.thrift.ClientDeserializeCtx;
import com.twitter.finagle.thrift.ServerToReqRep;
import com.twitter.finagle.thrift.ThriftClientRequest;

public class TestService {
  public interface Iface {
    public void test_void_endpoint(TestRequest request) throws TestException, TException;
    public TestResult test_endpoint_without_exception(TestRequest request) throws TException;
  }

  public interface AsyncIface {
    public void test_void_endpoint(TestRequest request, AsyncMethodCallback<Void> resultHandler) throws TException;
    public void test_endpoint_without_exception(TestRequest request, AsyncMethodCallback<TestResult> resultHandler) throws TException;
  }

  public interface ServiceIface {
    public Future<Void> test_void_endpoint(TestRequest request);
    public Future<TestResult> test_endpoint_without_exception(TestRequest request);
  }

  public static class Client extends TServiceClient implements Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      super(iprot, oprot);
    }

    public void test_void_endpoint(TestRequest request) throws TestException, TException
    {
      send_test_void_endpoint(request);
      recv_test_void_endpoint();
    }

    public void send_test_void_endpoint(TestRequest request) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("test_void_endpoint", TMessageType.CALL, ++seqid_));
      test_void_endpoint_args __args__ = new test_void_endpoint_args();
      __args__.setRequest(request);
      __args__.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_test_void_endpoint() throws TestException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.readFrom(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "test_void_endpoint failed: out of sequence response");
      }
      test_void_endpoint_result result = new test_void_endpoint_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }
    public TestResult test_endpoint_without_exception(TestRequest request) throws TException
    {
      send_test_endpoint_without_exception(request);
      return recv_test_endpoint_without_exception();
    }

    public void send_test_endpoint_without_exception(TestRequest request) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("test_endpoint_without_exception", TMessageType.CALL, ++seqid_));
      test_endpoint_without_exception_args __args__ = new test_endpoint_without_exception_args();
      __args__.setRequest(request);
      __args__.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public TestResult recv_test_endpoint_without_exception() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.readFrom(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "test_endpoint_without_exception failed: out of sequence response");
      }
      test_endpoint_without_exception_result result = new test_endpoint_without_exception_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "test_endpoint_without_exception failed: unknown result");
    }
  }

  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private final TAsyncClientManager clientManager;
      private final TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    private final TNonblockingTransport transport;
    private final TAsyncClientManager manager;

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
      this.manager = clientManager;
      this.transport = transport;
    }

    public void test_void_endpoint(TestRequest request, AsyncMethodCallback<Void> __resultHandler__) throws TException {
      checkReady();
      test_void_endpoint_call __method_call__ = new test_void_endpoint_call(request, __resultHandler__, this, super.getProtocolFactory(), this.transport);
      this.manager.call(__method_call__);
    }

    public static class test_void_endpoint_call extends TAsyncMethodCall<Void> {
      private TestRequest request;

      public test_void_endpoint_call(TestRequest request, AsyncMethodCallback<Void> __resultHandler__, TAsyncClient __client__, TProtocolFactory __protocolFactory__, TNonblockingTransport __transport__) throws TException {
        super(__client__, __protocolFactory__, __transport__, __resultHandler__, false);
        this.request = request;
      }

      public void write_args(TProtocol __prot__) throws TException {
        __prot__.writeMessageBegin(new TMessage("test_void_endpoint", TMessageType.CALL, 0));
        test_void_endpoint_args __args__ = new test_void_endpoint_args();
        __args__.setRequest(request);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();
      }

      protected Void getResult() throws TestException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol __prot__ = super.client.getProtocolFactory().getProtocol(__memoryTransport__);

        return null;
      }
     }
    public void test_endpoint_without_exception(TestRequest request, AsyncMethodCallback<TestResult> __resultHandler__) throws TException {
      checkReady();
      test_endpoint_without_exception_call __method_call__ = new test_endpoint_without_exception_call(request, __resultHandler__, this, super.getProtocolFactory(), this.transport);
      this.manager.call(__method_call__);
    }

    public static class test_endpoint_without_exception_call extends TAsyncMethodCall<TestResult> {
      private TestRequest request;

      public test_endpoint_without_exception_call(TestRequest request, AsyncMethodCallback<TestResult> __resultHandler__, TAsyncClient __client__, TProtocolFactory __protocolFactory__, TNonblockingTransport __transport__) throws TException {
        super(__client__, __protocolFactory__, __transport__, __resultHandler__, false);
        this.request = request;
      }

      public void write_args(TProtocol __prot__) throws TException {
        __prot__.writeMessageBegin(new TMessage("test_endpoint_without_exception", TMessageType.CALL, 0));
        test_endpoint_without_exception_args __args__ = new test_endpoint_without_exception_args();
        __args__.setRequest(request);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();
      }

      protected TestResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol __prot__ = super.client.getProtocolFactory().getProtocol(__memoryTransport__);
        return (new Client(__prot__)).recv_test_endpoint_without_exception();
      }
     }
   }


  public static class ServiceToClient implements ServiceIface {
    private final com.twitter.finagle.Service<ThriftClientRequest, byte[]> service;
    private final TProtocolFactory protocolFactory;
    private final TReusableBuffer tlReusableBuffer;
    private final scala.PartialFunction<com.twitter.finagle.service.ReqRep,com.twitter.finagle.service.ResponseClass> responseClassifier;

    /**
     * @deprecated use {@link com.twitter.finagle.thrift.RichClientParam} instead
     */
    @Deprecated
    public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, TProtocolFactory protocolFactory, scala.PartialFunction<com.twitter.finagle.service.ReqRep,com.twitter.finagle.service.ResponseClass> responseClassifier) {
      this(service, new com.twitter.finagle.thrift.RichClientParam(protocolFactory, responseClassifier));
    }

    public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, com.twitter.finagle.thrift.RichClientParam clientParam) {
      
      this.service = service;
      this.protocolFactory = clientParam.restrictedProtocolFactory();
      this.responseClassifier = clientParam.responseClassifier();
      this.tlReusableBuffer = new TReusableBuffer(512, clientParam.maxThriftBufferSize());
    }

    public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service) {
      this(service, new com.twitter.finagle.thrift.RichClientParam());
    }

    /**
     * @deprecated use {@link com.twitter.finagle.thrift.RichClientParam} instead
     */
    @Deprecated
    public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, TProtocolFactory protocolFactory) {
      this(service, new com.twitter.finagle.thrift.RichClientParam(protocolFactory, com.twitter.finagle.service.ResponseClassifier.Default()));
    }

    public Future<Void> test_void_endpoint(TestRequest request) {
      try {
        TReusableMemoryTransport __memoryTransport__ = tlReusableBuffer.get();
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("test_void_endpoint", TMessageType.CALL, 0));
        test_void_endpoint_args __args__ = new test_void_endpoint_args();
        __args__.setRequest(request);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOf(__memoryTransport__.getArray(), __memoryTransport__.length());
        final ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);

        Function<byte[], com.twitter.util.Try<Void>> replyDeserializer =
          new Function<byte[], com.twitter.util.Try<Void>>() {
            public com.twitter.util.Try<Void> apply(byte[] __buffer__) {
              TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
              TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
              try {
                (new Client(__prot__)).recv_test_void_endpoint();
                return new com.twitter.util.Return<Void>(null);
              } catch (Exception e) {
                return new com.twitter.util.Throw<Void>(e);
              }
            }
          };
        ClientDeserializeCtx serdeCtx = new ClientDeserializeCtx<Void>(__args__, replyDeserializer);

        return com.twitter.finagle.context.Contexts.local().let(
          ClientDeserializeCtx.Key(),
          serdeCtx,
          new com.twitter.util.Function0<Future<Void>>() {
            public Future<Void> apply() {

              Future<byte[]> __done__ = service.apply(__request__);
              return __done__.flatMap(new Function<byte[], Future<Void>>() {
                public Future<Void> apply(byte[] __buffer__) {
                  TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
                  TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
                  try {
                    (new Client(__prot__)).recv_test_void_endpoint();
                    return Future.value(null);
                  } catch (Exception e) {
                    return Future.exception(e);
                  }
                }
              });
            }
          });
      } catch (TException e) {
        return Future.exception(e);
      } finally {
        tlReusableBuffer.reset();
      }
    }
    public Future<TestResult> test_endpoint_without_exception(TestRequest request) {
      try {
        TReusableMemoryTransport __memoryTransport__ = tlReusableBuffer.get();
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("test_endpoint_without_exception", TMessageType.CALL, 0));
        test_endpoint_without_exception_args __args__ = new test_endpoint_without_exception_args();
        __args__.setRequest(request);
        __args__.write(__prot__);
        __prot__.writeMessageEnd();


        byte[] __buffer__ = Arrays.copyOf(__memoryTransport__.getArray(), __memoryTransport__.length());
        final ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, false);

        Function<byte[], com.twitter.util.Try<TestResult>> replyDeserializer =
          new Function<byte[], com.twitter.util.Try<TestResult>>() {
            public com.twitter.util.Try<TestResult> apply(byte[] __buffer__) {
              TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
              TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
              try {
                return new com.twitter.util.Return<TestResult>(((new Client(__prot__)).recv_test_endpoint_without_exception()));
              } catch (Exception e) {
                return new com.twitter.util.Throw<TestResult>(e);
              }
            }
          };
        ClientDeserializeCtx serdeCtx = new ClientDeserializeCtx<TestResult>(__args__, replyDeserializer);

        return com.twitter.finagle.context.Contexts.local().let(
          ClientDeserializeCtx.Key(),
          serdeCtx,
          new com.twitter.util.Function0<Future<TestResult>>() {
            public Future<TestResult> apply() {

              Future<byte[]> __done__ = service.apply(__request__);
              return __done__.flatMap(new Function<byte[], Future<TestResult>>() {
                public Future<TestResult> apply(byte[] __buffer__) {
                  TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
                  TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
                  try {
                    return Future.value((new Client(__prot__)).recv_test_endpoint_without_exception());
                  } catch (Exception e) {
                    return Future.exception(e);
                  }
                }
              });
            }
          });
      } catch (TException e) {
        return Future.exception(e);
      } finally {
        tlReusableBuffer.reset();
      }
    }
  }

  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("test_void_endpoint", new test_void_endpoint());
      processMap_.put("test_endpoint_without_exception", new test_endpoint_without_exception());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class test_void_endpoint implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        test_void_endpoint_args args = new test_void_endpoint_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("test_void_endpoint", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        test_void_endpoint_result result = new test_void_endpoint_result();
        try {
          iface_.test_void_endpoint(args.request);
          
        } catch (TestException ex) {
          result.ex = ex;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing test_void_endpoint");
          oprot.writeMessageBegin(new TMessage("test_void_endpoint", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("test_void_endpoint", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
    private class test_endpoint_without_exception implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        test_endpoint_without_exception_args args = new test_endpoint_without_exception_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("test_endpoint_without_exception", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        test_endpoint_without_exception_result result = new test_endpoint_without_exception_result();
        result.success = iface_.test_endpoint_without_exception(args.request);
        
        oprot.writeMessageBegin(new TMessage("test_endpoint_without_exception", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
    }
  }

  public static class Service extends com.twitter.finagle.Service<byte[], byte[]> {
    private final ServiceIface iface;
    private final TProtocolFactory protocolFactory;
    private final TReusableBuffer tlReusableBuffer;
    protected HashMap<String, com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]>> serviceMap =
      new HashMap<String, com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]>>();
    public Service(final ServiceIface iface, final com.twitter.finagle.thrift.RichServerParam serverParam) {
      this.iface = iface;
      this.protocolFactory = serverParam.restrictedProtocolFactory();
      this.tlReusableBuffer = new TReusableBuffer(512, serverParam.maxThriftBufferSize());
      createMethods();
    }

    public Service(final ServiceIface iface) {
      this(iface, new com.twitter.finagle.thrift.RichServerParam());
    }

    /**
     * @deprecated use {@link com.twitter.finagle.thrift.RichServerParam} instead
     */
    @Deprecated
    public Service(final ServiceIface iface, final TProtocolFactory protocolFactory) {
      this(iface, new com.twitter.finagle.thrift.RichServerParam(protocolFactory));
    }

    private void createMethods() {

      class test_void_endpointService {
        private final com.twitter.finagle.SimpleFilter<scala.Tuple2<TProtocol, Integer>, byte[]> protocolExnFilter = new com.twitter.finagle.SimpleFilter<scala.Tuple2<TProtocol, Integer>, byte[]>() {
          @Override
          public Future<byte[]> apply(scala.Tuple2<TProtocol, Integer> request, com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]> service) {
            return service.apply(request).rescue(new Function<Throwable, Future<byte[]>>() {
              @Override
              public Future<byte[]> apply(Throwable e) {
                TProtocol iprot = request._1();
                Integer seqid = request._2();
                if (e instanceof TProtocolException) {
                  try {
                    iprot.readMessageEnd();
                    setReqRepContext(request, new com.twitter.util.Throw(new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage())));
                    return exception("test_void_endpoint", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage());
                  } catch (Exception e1) {
                    setReqRepContext(request, new com.twitter.util.Throw(e1));
                    return Future.exception(e1);
                  }
                } else {
                  setReqRepContext(request, new com.twitter.util.Throw(e));
                  return Future.exception(e);
                }
              }
            });
          }
        };

        private final com.twitter.finagle.Filter<scala.Tuple2<TProtocol, Integer>, byte[], test_void_endpoint_args, Void> serdeFilter = new com.twitter.finagle.Filter<scala.Tuple2<TProtocol, Integer>, byte[], test_void_endpoint_args, Void>() {
          @Override
          public Future<byte[]> apply(scala.Tuple2<TProtocol, Integer> request, com.twitter.finagle.Service<test_void_endpoint_args, Void> service) {
            TProtocol iprot = request._1();
            Integer seqid = request._2();
            test_void_endpoint_args args = new test_void_endpoint_args();

            try {
              args.read(iprot);
              iprot.readMessageEnd();
            } catch (Exception e) {
              return Future.exception(e);
            }

            Future<Void> res = service.apply(args);
            test_void_endpoint_result result = new test_void_endpoint_result();
            return res.flatMap(new Function<Void, Future<byte[]>>() {
              @Override
              public Future<byte[]> apply(Void value) {
                setReqRepContext(args, new com.twitter.util.Return(value));
                return reply("test_void_endpoint", seqid, result);
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              @Override
              public Future<byte[]> apply(Throwable t) {
                if (t instanceof TestException) {
                  result.ex = (TestException)t;
                  setReqRepContext(args, new com.twitter.util.Throw(result.ex));
                  return reply("test_void_endpoint", seqid, result);
                }
                else {
                  setReqRepContext(args, new com.twitter.util.Throw(t));
                  return Future.exception(t);
                }
              }
            });
          }
        };

        private final com.twitter.finagle.Service<test_void_endpoint_args, Void> methodService = new com.twitter.finagle.Service<test_void_endpoint_args, Void>() {
          @Override
          public Future<Void> apply(test_void_endpoint_args args) {
            Future<Void> future = iface.test_void_endpoint(args.request);
            return future;
          }
        };

        private final com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]> getService =
          protocolExnFilter.andThen(serdeFilter).andThen(methodService);
      }

      serviceMap.put("test_void_endpoint", (new test_void_endpointService()).getService);

      class test_endpoint_without_exceptionService {
        private final com.twitter.finagle.SimpleFilter<scala.Tuple2<TProtocol, Integer>, byte[]> protocolExnFilter = new com.twitter.finagle.SimpleFilter<scala.Tuple2<TProtocol, Integer>, byte[]>() {
          @Override
          public Future<byte[]> apply(scala.Tuple2<TProtocol, Integer> request, com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]> service) {
            return service.apply(request).rescue(new Function<Throwable, Future<byte[]>>() {
              @Override
              public Future<byte[]> apply(Throwable e) {
                TProtocol iprot = request._1();
                Integer seqid = request._2();
                if (e instanceof TProtocolException) {
                  try {
                    iprot.readMessageEnd();
                    setReqRepContext(request, new com.twitter.util.Throw(new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage())));
                    return exception("test_endpoint_without_exception", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage());
                  } catch (Exception e1) {
                    setReqRepContext(request, new com.twitter.util.Throw(e1));
                    return Future.exception(e1);
                  }
                } else {
                  setReqRepContext(request, new com.twitter.util.Throw(e));
                  return Future.exception(e);
                }
              }
            });
          }
        };

        private final com.twitter.finagle.Filter<scala.Tuple2<TProtocol, Integer>, byte[], test_endpoint_without_exception_args, TestResult> serdeFilter = new com.twitter.finagle.Filter<scala.Tuple2<TProtocol, Integer>, byte[], test_endpoint_without_exception_args, TestResult>() {
          @Override
          public Future<byte[]> apply(scala.Tuple2<TProtocol, Integer> request, com.twitter.finagle.Service<test_endpoint_without_exception_args, TestResult> service) {
            TProtocol iprot = request._1();
            Integer seqid = request._2();
            test_endpoint_without_exception_args args = new test_endpoint_without_exception_args();

            try {
              args.read(iprot);
              iprot.readMessageEnd();
            } catch (Exception e) {
              return Future.exception(e);
            }

            Future<TestResult> res = service.apply(args);
            test_endpoint_without_exception_result result = new test_endpoint_without_exception_result();
            return res.flatMap(new Function<TestResult, Future<byte[]>>() {
              @Override
              public Future<byte[]> apply(TestResult value) {
                result.success = value;
                result.setSuccessIsSet(true);
                setReqRepContext(args, new com.twitter.util.Return(value));
                return reply("test_endpoint_without_exception", seqid, result);
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              @Override
              public Future<byte[]> apply(Throwable t) {
                setReqRepContext(args, new com.twitter.util.Throw(t));
                return Future.exception(t);
              }
            });
          }
        };

        private final com.twitter.finagle.Service<test_endpoint_without_exception_args, TestResult> methodService = new com.twitter.finagle.Service<test_endpoint_without_exception_args, TestResult>() {
          @Override
          public Future<TestResult> apply(test_endpoint_without_exception_args args) {
            Future<TestResult> future = iface.test_endpoint_without_exception(args.request);
            return future;
          }
        };

        private final com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]> getService =
          protocolExnFilter.andThen(serdeFilter).andThen(methodService);
      }

      serviceMap.put("test_endpoint_without_exception", (new test_endpoint_without_exceptionService()).getService);
    }

    private void setReqRepContext(Object req, com.twitter.util.Try<Object> rep) {
      scala.Option<ServerToReqRep> serdeCtx = com.twitter.finagle.context.Contexts.local().get(ServerToReqRep.Key());
      if (serdeCtx.nonEmpty()) {
        serdeCtx.get().setReqRep(new com.twitter.finagle.service.ReqRep(req, rep));
      }
    }

    public Future<byte[]> apply(byte[] request) {
      TTransport inputTransport = new TMemoryInputTransport(request);
      TProtocol iprot = protocolFactory.getProtocol(inputTransport);

      TMessage msg;
      try {
        msg = iprot.readMessageBegin();
      } catch (Exception e) {
        return Future.exception(e);
      }

      com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]> svc = serviceMap.get(msg.name);
      if (svc == null) {
        try {
          TProtocolUtil.skip(iprot, TType.STRUCT);
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
          TReusableMemoryTransport memoryBuffer = tlReusableBuffer.get();
          TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
          oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return Future.value(Arrays.copyOf(memoryBuffer.getArray(), memoryBuffer.length()));
        } catch (Exception e) {
          return Future.exception(e);
        } finally {
          tlReusableBuffer.reset();
        }
      }

      return svc.apply(new scala.Tuple2(iprot, msg.seqid));
    }

    private Future<byte[]> reply(String name, Integer seqid, TBase result) {
      try {
        TReusableMemoryTransport memoryBuffer = tlReusableBuffer.get();
        TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

        oprot.writeMessageBegin(new TMessage(name, TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();

        return Future.value(Arrays.copyOf(memoryBuffer.getArray(), memoryBuffer.length()));
      } catch (Exception e) {
        return Future.exception(e);
      } finally {
        tlReusableBuffer.reset();
      }
    }

    private Future<byte[]> exception(String name, Integer seqid, Integer code, String message) {
      try {
        TApplicationException x = new TApplicationException(code, message);
        TReusableMemoryTransport memoryBuffer = tlReusableBuffer.get();
        TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

        oprot.writeMessageBegin(new TMessage(name, TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        byte[] buffer = Arrays.copyOf(memoryBuffer.getArray(), memoryBuffer.length());
        return Future.value(buffer);
      } catch (Exception e1) {
        return Future.exception(e1);
      } finally {
        tlReusableBuffer.reset();
      }
    }
  }

  public static class test_void_endpoint_args implements TBase<test_void_endpoint_args, test_void_endpoint_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("test_void_endpoint_args");

  private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)1);


  public TestRequest request;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    REQUEST((short)1, "request");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST
          return REQUEST;
        default:
          return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  
  /**
   * FieldValueMetaData.type returns TType.STRING for both string and binary field values.
   * This set can be used to determine if a FieldValueMetaData with type TType.STRING is actually
   * declared as binary in the idl file.
   */
  public static final Set<FieldValueMetaData> binaryFieldValueMetaDatas;
  
  private static FieldValueMetaData registerBinaryFieldValueMetaData(FieldValueMetaData f, Set<FieldValueMetaData> binaryFieldValues) {
    binaryFieldValues.add(f);
    return f;
  }
  
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    Set<FieldValueMetaData> tmpSet = new HashSet<FieldValueMetaData>();
    tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, TestRequest.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    binaryFieldValueMetaDatas = Collections.unmodifiableSet(tmpSet);
    FieldMetaData.addStructMetaDataMap(test_void_endpoint_args.class, metaDataMap);
  }

  /**
   * Returns a map of the annotations and their values for this struct declaration.
   * See fieldAnnotations or valueAnnotations for the annotations attached to struct fields
   * or enum values.
   */
  public static final Map<String, String> structAnnotations;
  static {
    structAnnotations = Collections.emptyMap();
  }

  /**
   * Returns a map of the annotations for each of this struct's fields, keyed by the field.
   * See structAnnotations for the annotations attached to this struct's declaration.
   */
  public static final Map<_Fields, Map<String, String>> fieldAnnotations;
  static {
    fieldAnnotations = Collections.emptyMap();
  }

  /**
   * Returns the set of fields that have a configured default value.
   * The default values for these fields can be obtained by
   * instantiating this class with the default constructor.
   */
  public static final Set<_Fields> hasDefaultValue;
  static {
    Set<_Fields> tmp = EnumSet.noneOf(_Fields.class);
    hasDefaultValue = Collections.unmodifiableSet(tmp);
  }


  public test_void_endpoint_args() {
  }

  public test_void_endpoint_args(
    TestRequest request)
  {
    this();
    this.request = request;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public test_void_endpoint_args(test_void_endpoint_args other) {
    if (other.isSetRequest()) {
      this.request = new TestRequest(other.request);
    }
  }

  public static List<String> validateNewInstance(test_void_endpoint_args item) {
    final List<String> buf = new ArrayList<String>();

    if (item.isSetRequest()) {
      TestRequest _request = item.request;
      buf.addAll(com.twitter.thrift.TestRequest.validateNewInstance(_request));
    }

    return buf;
  }

  public test_void_endpoint_args deepCopy() {
    return new test_void_endpoint_args(this);
  }

  @java.lang.Override
  public void clear() {
    this.request = null;
  }

  public TestRequest getRequest() {
    return this.request;
  }

  public test_void_endpoint_args setRequest(TestRequest request) {
    this.request = request;
    
    return this;
  }

  public void unsetRequest() {
    this.request = null;
  }

  /** Returns true if field request is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest() {
    return this.request != null;
  }

  public void setRequestIsSet(boolean value) {
    if (!value) {
      this.request = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUEST:
      if (value == null) {
        unsetRequest();
      } else {
        setRequest((TestRequest)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST:
      return getRequest();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUEST:
      return isSetRequest();
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof test_void_endpoint_args)
      return this.equals((test_void_endpoint_args)that);
    return false;
  }

  public boolean equals(test_void_endpoint_args that) {
    if (that == null)
      return false;
    boolean this_present_request = true && this.isSetRequest();
    boolean that_present_request = true && that.isSetRequest();
    if (this_present_request || that_present_request) {
      if (!(this_present_request && that_present_request))
        return false;
      if (!this.request.equals(that.request))
        return false;
    }

    return true;
  }

  @java.lang.Override
  public int hashCode() {
    int hashCode = 1;
    if (isSetRequest()) {
      hashCode = 31 * hashCode + request.hashCode();
    }
    return hashCode;
  }

  public int compareTo(test_void_endpoint_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    test_void_endpoint_args typedOther = (test_void_endpoint_args)other;

    lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest()) {
      lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // REQUEST
          if (field.type == TType.STRUCT) {
            this.request = new TestRequest();
            this.request.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.request != null) {
      oprot.writeFieldBegin(REQUEST_FIELD_DESC);
      this.request.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("test_void_endpoint_args(");
    boolean first = true;
    sb.append("request:");
    if (this.request == null) {
      sb.append("null");
    } else {
      sb.append(this.request);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class test_void_endpoint_result implements TBase<test_void_endpoint_result, test_void_endpoint_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("test_void_endpoint_result");

  private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)1);


  public TestException ex;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    EX((short)1, "ex");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EX
          return EX;
        default:
          return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  
  /**
   * FieldValueMetaData.type returns TType.STRING for both string and binary field values.
   * This set can be used to determine if a FieldValueMetaData with type TType.STRING is actually
   * declared as binary in the idl file.
   */
  public static final Set<FieldValueMetaData> binaryFieldValueMetaDatas;
  
  private static FieldValueMetaData registerBinaryFieldValueMetaData(FieldValueMetaData f, Set<FieldValueMetaData> binaryFieldValues) {
    binaryFieldValues.add(f);
    return f;
  }
  
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    Set<FieldValueMetaData> tmpSet = new HashSet<FieldValueMetaData>();
    tmpMap.put(_Fields.EX, new FieldMetaData("ex", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, TestException.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    binaryFieldValueMetaDatas = Collections.unmodifiableSet(tmpSet);
    FieldMetaData.addStructMetaDataMap(test_void_endpoint_result.class, metaDataMap);
  }

  /**
   * Returns a map of the annotations and their values for this struct declaration.
   * See fieldAnnotations or valueAnnotations for the annotations attached to struct fields
   * or enum values.
   */
  public static final Map<String, String> structAnnotations;
  static {
    structAnnotations = Collections.emptyMap();
  }

  /**
   * Returns a map of the annotations for each of this struct's fields, keyed by the field.
   * See structAnnotations for the annotations attached to this struct's declaration.
   */
  public static final Map<_Fields, Map<String, String>> fieldAnnotations;
  static {
    fieldAnnotations = Collections.emptyMap();
  }

  /**
   * Returns the set of fields that have a configured default value.
   * The default values for these fields can be obtained by
   * instantiating this class with the default constructor.
   */
  public static final Set<_Fields> hasDefaultValue;
  static {
    Set<_Fields> tmp = EnumSet.noneOf(_Fields.class);
    hasDefaultValue = Collections.unmodifiableSet(tmp);
  }


  public test_void_endpoint_result() {
  }

  public test_void_endpoint_result(
    TestException ex)
  {
    this();
    this.ex = ex;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public test_void_endpoint_result(test_void_endpoint_result other) {
    if (other.isSetEx()) {
      this.ex = new TestException(other.ex);
    }
  }

  public static List<String> validateNewInstance(test_void_endpoint_result item) {
    final List<String> buf = new ArrayList<String>();

    if (item.isSetEx()) {
      TestException _ex = item.ex;
      buf.addAll(com.twitter.thrift.TestException.validateNewInstance(_ex));
    }

    return buf;
  }

  public test_void_endpoint_result deepCopy() {
    return new test_void_endpoint_result(this);
  }

  @java.lang.Override
  public void clear() {
    this.ex = null;
  }

  public TestException getEx() {
    return this.ex;
  }

  public test_void_endpoint_result setEx(TestException ex) {
    this.ex = ex;
    
    return this;
  }

  public void unsetEx() {
    this.ex = null;
  }

  /** Returns true if field ex is set (has been assigned a value) and false otherwise */
  public boolean isSetEx() {
    return this.ex != null;
  }

  public void setExIsSet(boolean value) {
    if (!value) {
      this.ex = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EX:
      if (value == null) {
        unsetEx();
      } else {
        setEx((TestException)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EX:
      return getEx();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EX:
      return isSetEx();
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof test_void_endpoint_result)
      return this.equals((test_void_endpoint_result)that);
    return false;
  }

  public boolean equals(test_void_endpoint_result that) {
    if (that == null)
      return false;
    boolean this_present_ex = true && this.isSetEx();
    boolean that_present_ex = true && that.isSetEx();
    if (this_present_ex || that_present_ex) {
      if (!(this_present_ex && that_present_ex))
        return false;
      if (!this.ex.equals(that.ex))
        return false;
    }

    return true;
  }

  @java.lang.Override
  public int hashCode() {
    int hashCode = 1;
    if (isSetEx()) {
      hashCode = 31 * hashCode + ex.hashCode();
    }
    return hashCode;
  }

  public int compareTo(test_void_endpoint_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    test_void_endpoint_result typedOther = (test_void_endpoint_result)other;

    lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEx()) {
      lastComparison = TBaseHelper.compareTo(this.ex, typedOther.ex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // EX
          if (field.type == TType.STRUCT) {
            this.ex = new TestException();
            this.ex.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetEx()) {
      oprot.writeFieldBegin(EX_FIELD_DESC);
      this.ex.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("test_void_endpoint_result(");
    boolean first = true;
    sb.append("ex:");
    if (this.ex == null) {
      sb.append("null");
    } else {
      sb.append(this.ex);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}



  public static class test_endpoint_without_exception_args implements TBase<test_endpoint_without_exception_args, test_endpoint_without_exception_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("test_endpoint_without_exception_args");

  private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)1);


  public TestRequest request;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    REQUEST((short)1, "request");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST
          return REQUEST;
        default:
          return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  
  /**
   * FieldValueMetaData.type returns TType.STRING for both string and binary field values.
   * This set can be used to determine if a FieldValueMetaData with type TType.STRING is actually
   * declared as binary in the idl file.
   */
  public static final Set<FieldValueMetaData> binaryFieldValueMetaDatas;
  
  private static FieldValueMetaData registerBinaryFieldValueMetaData(FieldValueMetaData f, Set<FieldValueMetaData> binaryFieldValues) {
    binaryFieldValues.add(f);
    return f;
  }
  
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    Set<FieldValueMetaData> tmpSet = new HashSet<FieldValueMetaData>();
    tmpMap.put(_Fields.REQUEST, new FieldMetaData("request", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, TestRequest.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    binaryFieldValueMetaDatas = Collections.unmodifiableSet(tmpSet);
    FieldMetaData.addStructMetaDataMap(test_endpoint_without_exception_args.class, metaDataMap);
  }

  /**
   * Returns a map of the annotations and their values for this struct declaration.
   * See fieldAnnotations or valueAnnotations for the annotations attached to struct fields
   * or enum values.
   */
  public static final Map<String, String> structAnnotations;
  static {
    structAnnotations = Collections.emptyMap();
  }

  /**
   * Returns a map of the annotations for each of this struct's fields, keyed by the field.
   * See structAnnotations for the annotations attached to this struct's declaration.
   */
  public static final Map<_Fields, Map<String, String>> fieldAnnotations;
  static {
    fieldAnnotations = Collections.emptyMap();
  }

  /**
   * Returns the set of fields that have a configured default value.
   * The default values for these fields can be obtained by
   * instantiating this class with the default constructor.
   */
  public static final Set<_Fields> hasDefaultValue;
  static {
    Set<_Fields> tmp = EnumSet.noneOf(_Fields.class);
    hasDefaultValue = Collections.unmodifiableSet(tmp);
  }


  public test_endpoint_without_exception_args() {
  }

  public test_endpoint_without_exception_args(
    TestRequest request)
  {
    this();
    this.request = request;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public test_endpoint_without_exception_args(test_endpoint_without_exception_args other) {
    if (other.isSetRequest()) {
      this.request = new TestRequest(other.request);
    }
  }

  public static List<String> validateNewInstance(test_endpoint_without_exception_args item) {
    final List<String> buf = new ArrayList<String>();

    if (item.isSetRequest()) {
      TestRequest _request = item.request;
      buf.addAll(com.twitter.thrift.TestRequest.validateNewInstance(_request));
    }

    return buf;
  }

  public test_endpoint_without_exception_args deepCopy() {
    return new test_endpoint_without_exception_args(this);
  }

  @java.lang.Override
  public void clear() {
    this.request = null;
  }

  public TestRequest getRequest() {
    return this.request;
  }

  public test_endpoint_without_exception_args setRequest(TestRequest request) {
    this.request = request;
    
    return this;
  }

  public void unsetRequest() {
    this.request = null;
  }

  /** Returns true if field request is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest() {
    return this.request != null;
  }

  public void setRequestIsSet(boolean value) {
    if (!value) {
      this.request = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUEST:
      if (value == null) {
        unsetRequest();
      } else {
        setRequest((TestRequest)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST:
      return getRequest();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUEST:
      return isSetRequest();
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof test_endpoint_without_exception_args)
      return this.equals((test_endpoint_without_exception_args)that);
    return false;
  }

  public boolean equals(test_endpoint_without_exception_args that) {
    if (that == null)
      return false;
    boolean this_present_request = true && this.isSetRequest();
    boolean that_present_request = true && that.isSetRequest();
    if (this_present_request || that_present_request) {
      if (!(this_present_request && that_present_request))
        return false;
      if (!this.request.equals(that.request))
        return false;
    }

    return true;
  }

  @java.lang.Override
  public int hashCode() {
    int hashCode = 1;
    if (isSetRequest()) {
      hashCode = 31 * hashCode + request.hashCode();
    }
    return hashCode;
  }

  public int compareTo(test_endpoint_without_exception_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    test_endpoint_without_exception_args typedOther = (test_endpoint_without_exception_args)other;

    lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest()) {
      lastComparison = TBaseHelper.compareTo(this.request, typedOther.request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // REQUEST
          if (field.type == TType.STRUCT) {
            this.request = new TestRequest();
            this.request.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.request != null) {
      oprot.writeFieldBegin(REQUEST_FIELD_DESC);
      this.request.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("test_endpoint_without_exception_args(");
    boolean first = true;
    sb.append("request:");
    if (this.request == null) {
      sb.append("null");
    } else {
      sb.append(this.request);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class test_endpoint_without_exception_result implements TBase<test_endpoint_without_exception_result, test_endpoint_without_exception_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("test_endpoint_without_exception_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);


  public TestResult success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
          return SUCCESS;
        default:
          return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  
  /**
   * FieldValueMetaData.type returns TType.STRING for both string and binary field values.
   * This set can be used to determine if a FieldValueMetaData with type TType.STRING is actually
   * declared as binary in the idl file.
   */
  public static final Set<FieldValueMetaData> binaryFieldValueMetaDatas;
  
  private static FieldValueMetaData registerBinaryFieldValueMetaData(FieldValueMetaData f, Set<FieldValueMetaData> binaryFieldValues) {
    binaryFieldValues.add(f);
    return f;
  }
  
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    Set<FieldValueMetaData> tmpSet = new HashSet<FieldValueMetaData>();
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new StructMetaData(TType.STRUCT, TestResult.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    binaryFieldValueMetaDatas = Collections.unmodifiableSet(tmpSet);
    FieldMetaData.addStructMetaDataMap(test_endpoint_without_exception_result.class, metaDataMap);
  }

  /**
   * Returns a map of the annotations and their values for this struct declaration.
   * See fieldAnnotations or valueAnnotations for the annotations attached to struct fields
   * or enum values.
   */
  public static final Map<String, String> structAnnotations;
  static {
    structAnnotations = Collections.emptyMap();
  }

  /**
   * Returns a map of the annotations for each of this struct's fields, keyed by the field.
   * See structAnnotations for the annotations attached to this struct's declaration.
   */
  public static final Map<_Fields, Map<String, String>> fieldAnnotations;
  static {
    fieldAnnotations = Collections.emptyMap();
  }

  /**
   * Returns the set of fields that have a configured default value.
   * The default values for these fields can be obtained by
   * instantiating this class with the default constructor.
   */
  public static final Set<_Fields> hasDefaultValue;
  static {
    Set<_Fields> tmp = EnumSet.noneOf(_Fields.class);
    hasDefaultValue = Collections.unmodifiableSet(tmp);
  }


  public test_endpoint_without_exception_result() {
  }

  public test_endpoint_without_exception_result(
    TestResult success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public test_endpoint_without_exception_result(test_endpoint_without_exception_result other) {
    if (other.isSetSuccess()) {
      this.success = new TestResult(other.success);
    }
  }

  public static List<String> validateNewInstance(test_endpoint_without_exception_result item) {
    final List<String> buf = new ArrayList<String>();

    if (item.isSetSuccess()) {
      TestResult _success = item.success;
      buf.addAll(com.twitter.thrift.TestResult.validateNewInstance(_success));
    }

    return buf;
  }

  public test_endpoint_without_exception_result deepCopy() {
    return new test_endpoint_without_exception_result(this);
  }

  @java.lang.Override
  public void clear() {
    this.success = null;
  }

  public TestResult getSuccess() {
    return this.success;
  }

  public test_endpoint_without_exception_result setSuccess(TestResult success) {
    this.success = success;
    
    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((TestResult)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof test_endpoint_without_exception_result)
      return this.equals((test_endpoint_without_exception_result)that);
    return false;
  }

  public boolean equals(test_endpoint_without_exception_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @java.lang.Override
  public int hashCode() {
    int hashCode = 1;
    if (isSetSuccess()) {
      hashCode = 31 * hashCode + success.hashCode();
    }
    return hashCode;
  }

  public int compareTo(test_endpoint_without_exception_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    test_endpoint_without_exception_result typedOther = (test_endpoint_without_exception_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRUCT) {
            this.success = new TestResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("test_endpoint_without_exception_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}



}
