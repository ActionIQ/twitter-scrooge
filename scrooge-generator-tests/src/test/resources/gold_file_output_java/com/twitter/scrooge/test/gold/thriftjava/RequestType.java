/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.twitter.scrooge.test.gold.thriftjava;


import java.util.Map;
import java.util.HashMap;
import java.util.Collections;
import java.util.EnumMap;
import org.apache.thrift.TEnum;

public enum RequestType implements TEnum {
  UnknownPassThrough(-1),
  Create(1),
  Read(2);

  private int value;

  private RequestType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Set the integer value of this enum value. Used in passthrough
   */
  private void setValue(int value) {
    this.value = value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static RequestType findByValue(int value) {
    switch (value) {
      case 1:
        return Create;
      case 2:
        return Read;
      default:
        UnknownPassThrough.setValue(value);
        return UnknownPassThrough;
    }
  }

  /**
   * Returns a map of the annotations and their values for this struct declaration.
   * See fieldAnnotations or valueAnnotations for the annotations attached to struct fields
   * or enum values.
   */
  public static final Map<String, String> structAnnotations;
  static {
    Map<String, String> tmpMap = new HashMap<String, String>();
    tmpMap.put("enum.annotation", "false");
    structAnnotations = Collections.unmodifiableMap(tmpMap);
  }

  /**
   * Returns a map of the annotations for each of this enum's values, keyed by the enum
   * value. See structAnnotations for the annotations attached to this enum's declaration.
   */
  public static final Map<RequestType, Map<String, String>> valueAnnotations;
  static {
    Map<RequestType, Map<String, String>> tmpMap = new EnumMap<RequestType, Map<String, String>>(RequestType.class);
      {
        Map<String, String> tmpFieldMap = new HashMap<String, String>();
        tmpFieldMap.put("some.annotation", "true");
        tmpMap.put(Create, Collections.unmodifiableMap(tmpFieldMap));
      }
    valueAnnotations = Collections.unmodifiableMap(tmpMap);
  }

}
