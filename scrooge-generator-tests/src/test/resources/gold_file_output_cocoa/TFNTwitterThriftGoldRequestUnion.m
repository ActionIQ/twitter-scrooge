/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 *   source file: scrooge/scrooge-generator-tests/src/test/resources/gold_file_input/gold.thrift
 */
#import "TFNTwitterThriftGoldRequestUnion.h"

@import ApacheThrift;

@implementation TFNTwitterThriftGoldRequestUnion

- (NSString*)description
{
    NSMutableString* ms = [NSMutableString stringWithString:@"TFNTwitterThriftGoldRequestUnion( "];
    [ms appendString:@"id_:"];
    [ms appendFormat:@"%@ ", @(_id_)];
    [ms appendString:@"name:"];
    [ms appendFormat:@"%@ ", _name];
    [ms appendString:@")"];
    return [NSString stringWithString:ms];
}

- (instancetype)initWithId_:(int32_t)id_
{
    if (self = [super init]) {
        [self setId_:id_];
    }
    return self;
}

- (instancetype)initWithName:(NSString *)name
{
    if (self = [super init]) {
        [self setName:name];
    }
    return self;
}

- (instancetype)initWithCoder:(NSCoder*)decoder
{
    if (self = [super init]) {
        if ([decoder containsValueForKey:@"1"]) {
            [self setId_:(int32_t)[decoder decodeInt32ForKey:@"1"]];
        }
        if ([decoder containsValueForKey:@"2"]) {
            [self setName:(NSString *)[decoder decodeObjectForKey:@"2"]];
        }
    }
    return self;
}

- (void)encodeWithCoder:(NSCoder*)encoder
{
    if (_id_IsSet) {
        [encoder encodeInt32:_id_ forKey:@"1"];
    }
    if (_nameIsSet) {
        [encoder encodeObject:_name forKey:@"2"];
    }
}

- (void)setId_:(int32_t)id_
{
    _id_ = id_;
    _id_IsSet = YES;
}

- (void)setName:(NSString *)name
{
    _name = [name copy];
    _nameIsSet = name != nil;
}

- (void)read:(id <TProtocol>)inProtocol
{
    NSString* fieldName;
    int fieldType;
    int fieldID;

    [inProtocol readStructBeginReturningName:nil];
    while (true) {
        [inProtocol readFieldBeginReturningName:&fieldName type:&fieldType fieldID:&fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID) {
            case 1:
                if (fieldType == TType_I32) {
                    int32_t id_item;
                    id_item = [inProtocol readI32];
                    [self setId_:id_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_STRING) {
                    NSString * name_item;
                    name_item = [inProtocol readString];
                    [self setName:name_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
        default:
            NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
            [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
            break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
    [self validate];
}

- (void)write:(id <TProtocol>)outProtocol
{
    [self validate];
    [outProtocol writeStructBeginWithName:@"TFNTwitterThriftGoldRequestUnion"];
    if (_id_IsSet) {
        [outProtocol writeFieldBeginWithName:@"id" type:TType_I32 fieldID:1];
        int32_t id_item = _id_;
        [outProtocol writeI32:id_item];
        [outProtocol writeFieldEnd];
    }
    if (_nameIsSet) {
        [outProtocol writeFieldBeginWithName:@"name" type:TType_STRING fieldID:2];
        NSString * name_item = _name;
        [outProtocol writeString:name_item];
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (void)validate
{
}

@end
