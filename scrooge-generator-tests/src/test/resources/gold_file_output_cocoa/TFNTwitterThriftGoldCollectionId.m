/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 *   source file: scrooge/scrooge-generator-tests/src/test/resources/gold_file_input/gold.thrift
 */
#import "TFNTwitterThriftGoldCollectionId.h"

@import ApacheThrift;

@implementation TFNTwitterThriftGoldCollectionId

- (NSString*)description
{
    NSMutableString* ms = [NSMutableString stringWithString:@"TFNTwitterThriftGoldCollectionId( "];
    [ms appendString:@"collectionLongId:"];
    [ms appendFormat:@"%@ ", @(_collectionLongId)];
    [ms appendString:@")"];
    return [NSString stringWithString:ms];
}

- (instancetype)initWithCollectionLongId:(int64_t)collectionLongId
{
    if (self = [super init]) {
        [self setCollectionLongId:collectionLongId];
    }

    return self;
}

+ (instancetype)instanceWithCollectionLongId:(int64_t)collectionLongId error:(NSError **)error
{
    TFNTwitterThriftGoldCollectionId *instance = [[TFNTwitterThriftGoldCollectionId alloc] initWithCollectionLongId:collectionLongId];
    if (error) {
        NSArray *invalidFields = [instance validateNonOptionalFields];
        if (invalidFields.count > 0) {
            NSString *errorDescription = [NSString stringWithFormat:@"Required fields not set: %@", invalidFields];
            *error = [NSError errorWithDomain:@"com.twitter.scrooge.backend.CocoaGenerator" code:0 userInfo:@{NSLocalizedDescriptionKey: errorDescription}];
        }
    }
    return instance;
}

- (instancetype)initWithCoder:(NSCoder*)decoder
{
    if (self = [super init]) {
        if ([decoder containsValueForKey:@"1"]) {
            [self setCollectionLongId:(int64_t)[decoder decodeInt64ForKey:@"1"]];
        }
    }
    return self;
}

- (void)encodeWithCoder:(NSCoder*)encoder
{
    if (_collectionLongIdIsSet) {
        [encoder encodeInt64:_collectionLongId forKey:@"1"];
    }
}

- (void)setCollectionLongId:(int64_t)collectionLongId
{
    _collectionLongId = collectionLongId;
    _collectionLongIdIsSet = YES;
}

- (void)read:(id <TProtocol>)inProtocol
{
    NSString* fieldName;
    int fieldType;
    int fieldID;

    [inProtocol readStructBeginReturningName:nil];
    while (true) {
        [inProtocol readFieldBeginReturningName:&fieldName type:&fieldType fieldID:&fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID) {
            case 1:
                if (fieldType == TType_I64) {
                    int64_t collectionLongId_item;
                    collectionLongId_item = [inProtocol readI64];
                    [self setCollectionLongId:collectionLongId_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
        default:
            NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
            [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
            break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
    [self validate];
}

- (void)write:(id <TProtocol>)outProtocol
{
    [self validate];
    [outProtocol writeStructBeginWithName:@"TFNTwitterThriftGoldCollectionId"];
    if (_collectionLongIdIsSet) {
        [outProtocol writeFieldBeginWithName:@"collectionLongId" type:TType_I64 fieldID:1];
        int64_t collectionLongId_item = _collectionLongId;
        [outProtocol writeI64:collectionLongId_item];
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (void)validate
{
    if (!_collectionLongIdIsSet) {
        @throw [TProtocolException exceptionWithName:@"TProtocolException" reason:@"Required field 'collectionLongId' is not set."];
    }
}

- (NSArray *)validateNonOptionalFields
{
    NSMutableArray *invalidFields = [NSMutableArray array];
    if (!_collectionLongIdIsSet) {
        [invalidFields addObject:@"collectionLongId"];
    }
    return [invalidFields copy];
}

@end
