package {{package}}

import com.twitter.scrooge.ThriftEnum
import scala.collection.immutable.{Map => immutable$Map}

{{docstring}}
@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
object {{EnumName}} extends _root_.com.twitter.scrooge.ThriftEnumObject[{{EnumName}}] {

{{#annotations}}
  val annotations: immutable$Map[String, String] = immutable$Map(
{{#pairs}}
    ("{{key}}", "{{value}}")
{{/pairs|,}}
  )
{{/annotations}}
{{^annotations}}
  val annotations: immutable$Map[String, String] = immutable$Map.empty
{{/annotations}}

{{#values}}
  {{valuedocstring}}
  case object {{name}} extends {{package}}.{{EnumName}} {
    val value: Int = {{value}}
    val name: String = "{{name}}"
    val originalName: String = "{{originalName}}"
{{#annotations}}
    val annotations: immutable$Map[String, String] = immutable$Map(
{{#pairs}}
      ("{{key}}", "{{value}}")
{{/pairs|,}}
    )
{{/annotations}}
{{^annotations}}
    val annotations: immutable$Map[String, String] = immutable$Map.empty
{{/annotations}}
  }

  private[this] val _Some{{name}}: _root_.scala.Some[{{package}}.{{EnumName}}] = _root_.scala.Some({{package}}.{{EnumName}}.{{name}})
{{/values}}

  case class EnumUnknown{{EnumName}}(value: Int)
    extends {{package}}.{{EnumName}} with _root_.com.twitter.scrooge.EnumItemUnknown
  {
    val name: String = "EnumUnknown{{EnumName}}" + value
    def originalName: String = name
{{#annotations}}
    val annotations: immutable$Map[String, String] = immutable$Map(
  {{#pairs}}
    ("{{key}}", "{{value}}")
  {{/pairs|,}}  )
{{/annotations}}
{{^annotations}}
    val annotations: immutable$Map[String, String] = immutable$Map.empty
{{/annotations}}
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   */
  def apply(value: Int): {{package}}.{{EnumName}} = {
    val enumOpt = get(value)
    if (enumOpt.isDefined) {
      enumOpt.get
    } else {
      throw new NoSuchElementException(_root_.java.lang.Integer.toString(value))
    }
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknown{{EnumName}}(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): {{package}}.{{EnumName}} = {
    val enumOpt = get(value)
    if (enumOpt.isDefined) {
      enumOpt.get
    } else {
      EnumUnknown{{EnumName}}(value)
    }
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[{{package}}.{{EnumName}}] =
    value match {
{{#values}}
      case {{value}} => _Some{{name}}
{{/values}}
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[{{package}}.{{EnumName}}] =
    name.toLowerCase match {
{{#values}}
      case "{{unquotedNameLowerCase}}" => _Some{{name}}
{{/values}}
      case _ => _root_.scala.None
    }

  lazy val list: List[{{package}}.{{EnumName}}] = scala.List[{{package}}.{{EnumName}}](
{{#values}}
    {{package}}.{{EnumName}}.{{name}}
{{/values|,}}
  )
}


{{docstring}}
@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait {{EnumName}} extends ThriftEnum with Serializable
