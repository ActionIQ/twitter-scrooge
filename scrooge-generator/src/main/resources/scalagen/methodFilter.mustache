val {{methodSvcNameForCompile}}: finagle$Filter[(TProtocol, Int), Array[Byte], {{funcObjectName}}.Args, {{funcObjectName}}.SuccessType] = {
  val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[{{funcObjectName}}.Args, {{funcObjectName}}.Result]] = perMethodStatsFilter({{funcObjectName}})

  val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[{{funcObjectName}}.Args, {{funcObjectName}}.Result]] {
    def apply(
      request: (TProtocol, Int),
      service: _root_.com.twitter.finagle.Service[(TProtocol, Int), RichResponse[{{funcObjectName}}.Args, {{funcObjectName}}.Result]]
    ): Future[RichResponse[{{funcObjectName}}.Args, {{funcObjectName}}.Result]] = {
      val iprot = request._1
      val seqid = request._2
      val res = service(request)
      res.transform(resTry => {
        if (resTry.isThrow && resTry.throwable.isInstanceOf[TProtocolException]) {
          val underlyingException = resTry.throwable
          iprot.readMessageEnd()
          Future.value(
            ProtocolExceptionResponse(
              null,
              exception("{{methodSvcNameForWire}}", seqid, TApplicationException.PROTOCOL_ERROR, underlyingException.getMessage),
              new TApplicationException(TApplicationException.PROTOCOL_ERROR, underlyingException.getMessage)))
        } else {
          res
        }
      })
    }
  }

  val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[{{funcObjectName}}.Args, {{funcObjectName}}.Result], {{funcObjectName}}.Args, {{funcObjectName}}.SuccessType] {
    def apply(
      request: (TProtocol, Int),
      service: _root_.com.twitter.finagle.Service[{{funcObjectName}}.Args, {{funcObjectName}}.SuccessType]
    ): Future[RichResponse[{{funcObjectName}}.Args, {{funcObjectName}}.Result]] = {
      val iprot = request._1
      val seqid = request._2
      val start = System.nanoTime
      val args = {{funcObjectName}}.Args.decode(iprot)
      iprot.readMessageEnd()
      _root_.com.twitter.finagle.tracing.Trace.recordBinary("srv/request_deserialization_ns", System.nanoTime - start)
      _root_.com.twitter.finagle.context.Contexts.local.let(
        _root_.com.twitter.finagle.thrift.MethodMetadata.Key,
        _root_.com.twitter.finagle.thrift.MethodMetadata({{funcObjectName}})) {
        service(args)
      }.transform(resTry => {
        if (resTry.isReturn) {
          val methodResult = {{funcObjectName}}.Result({{resultNamedArg}})
          Future.value(
            SuccessfulResponse(
              args,
              reply("{{methodSvcNameForWire}}", seqid, methodResult),
              methodResult))
        } else { // Throw[_]
{{#hasExceptions}}
          val underlyingException = resTry.throwable
{{#exceptions}}
          {{^first}}else {{/first}}if (underlyingException.isInstanceOf[{{exceptionType}}])
            Future.value(
              ThriftExceptionResponse(
                args,
                reply("{{methodSvcNameForWire}}", seqid, {{funcObjectName}}.Result({{fieldName}} = Some(underlyingException.asInstanceOf[{{exceptionType}}]))),
                underlyingException.asInstanceOf[{{exceptionType}}]))
{{/exceptions}}
          else
{{/hasExceptions}}
            Future.const(resTry.asInstanceOf[Throw[RichResponse[{{funcObjectName}}.Args, {{funcObjectName}}.Result]]])
        }
      })
    }
  }
  statsFilter.andThen(protocolExnFilter).andThen(serdeFilter)
}
