addService("{{methodSvcNameForWire}}", {
  val methodService = new _root_.com.twitter.finagle.Service[{{funcObjectName}}.Args, {{funcObjectName}}.SuccessType] {
    def apply(args: {{funcObjectName}}.Args): Future[{{funcObjectName}}.SuccessType] = {
      val trace = _root_.com.twitter.finagle.tracing.Trace()
      if (trace.isActivelyTracing) {
        trace.recordRpc("{{methodSvcNameForWire}}")
        trace.recordBinary("srv/thrift_endpoint", "{{package}}.{{ServiceName}}#{{methodSvcNameForCompile}}()")
      }
{{#args}}
{{#isValidationType}}
{{#isOption}}
      if ({{arg}}.isDefined) {
{{/isOption}}
      try {
        val {{argResult}} = {{typeParameter}}.validateInstanceValue({{deReferencedArg}})
        if ({{argResult}}.nonEmpty) throw new com.twitter.scrooge.thrift_validation.ThriftValidationException("{{methodSvcNameForCompile}}", {{arg}}.getClass, {{argResult}})
      } catch  {
         case _: NullPointerException => ()
      }
{{#isOption}}
      }
{{/isOption}}
{{/isValidationType}}
{{/args}}
      iface.{{methodSvcNameForCompile}}({{argNames}})
    }
  }

  filters.{{methodSvcNameForCompile}}.andThen(methodService)
})
