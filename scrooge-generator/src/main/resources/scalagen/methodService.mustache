addService("{{methodSvcNameForWire}}", {
  val methodService = new _root_.com.twitter.finagle.Service[{{funcObjectName}}.Args, {{funcObjectName}}.SuccessType] {
    def apply(args: {{funcObjectName}}.Args): Future[{{funcObjectName}}.SuccessType] = {
      _root_.com.twitter.finagle.thrift.ServerAnnotations.annotate("{{methodSvcNameForWire}}", "{{package}}.{{ServiceName}}#{{methodSvcNameForCompile}}()")
{{#hasValidationAnnotation}}
{{#argsWithValidations}}
      val {{violationArg}}: Set[com.twitter.scrooge.thrift_validation.ThriftValidationViolation] =
{{#isValidationType}}
{{#isOption}}
        if ({{arg}}.isDefined) {
{{/isOption}}
        if ({{deReferencedArg}} != null) {{typeParameter}}.validateInstanceValue({{deReferencedArg}})
        else Set.empty
{{#isOption}}
        } else {
          Set.empty
        }
{{/isOption}}
{{/isValidationType}}
{{^isValidationType}}
        Set.empty
{{/isValidationType}}
{{/argsWithValidations}}
      if ({{#argsWithValidations}}{{violationArg}}.isEmpty{{/argsWithValidations| && }}) {
        iface.{{methodSvcNameForCompile}}({{argNames}})
      } else if (iface.isInstanceOf[ServerValidationMixin]) {
        // If any request failed validation and user implement the `violationReturning` method, we will
        // execute the overriden implementation of `violationReturning` method provided by the user.
        iface.asInstanceOf[ServerValidationMixin].{{violationReturningMethodSvcNameForCompile}}({{argNames}}, {{#argsWithValidations}}{{violationArg}}{{/argsWithValidations|, }})
      } else {
        // If user did not override the default `violationReturning` method in the `ServerValidationMixin`,
        // throw an exception for failed validations.
{{#argsWithValidations}}
{{#oneArg}}
        throw new com.twitter.scrooge.thrift_validation.ThriftValidationException("{{funcName}}", {{arg}}.getClass, {{violationArg}})
{{/oneArg}}
{{^oneArg}}
{{#firstArg}}
        if ({{violationArg}}.nonEmpty) throw new com.twitter.scrooge.thrift_validation.ThriftValidationException("{{funcName}}", {{arg}}.getClass, {{violationArg}})
{{/firstArg}}
{{#middleArgs}}
        else if ({{violationArg}}.nonEmpty) throw new com.twitter.scrooge.thrift_validation.ThriftValidationException("{{funcName}}", {{arg}}.getClass, {{violationArg}})
{{/middleArgs}}
{{#lastArg}}
        else throw new com.twitter.scrooge.thrift_validation.ThriftValidationException("{{funcName}}", {{arg}}.getClass, {{violationArg}})
{{/lastArg}}
{{/oneArg}}
{{/argsWithValidations}}
      }
{{/hasValidationAnnotation}}
{{^hasValidationAnnotation}}
      iface.{{methodSvcNameForCompile}}({{argNames}})
{{/hasValidationAnnotation}}
    }
  }

  filters.{{methodSvcNameForCompile}}.andThen(methodService)
})
