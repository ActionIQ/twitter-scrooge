addService("{{methodSvcNameForWire}}", {
  val methodService = new _root_.com.twitter.finagle.Service[{{funcObjectName}}.Args, {{funcObjectName}}.SuccessType] {
    def apply(args: {{funcObjectName}}.Args): Future[{{funcObjectName}}.SuccessType] = {
      _root_.com.twitter.finagle.thrift.ServerAnnotations.annotate("{{methodSvcNameForWire}}", "{{package}}.{{ServiceName}}#{{methodSvcNameForCompile}}()")
{{#hasValidationAnnotation}}
{{#argsWithValidations}}
      val {{violationArg}}: Set[com.twitter.scrooge.thrift_validation.ThriftValidationViolation] =
{{#isValidationType}}
{{#isOption}}
        if ({{arg}}.isDefined) {
{{/isOption}}
        if ({{deReferencedArg}} != null) {{typeParameter}}.validateInstanceValue({{deReferencedArg}})
        else Set.empty
{{#isOption}}
        } else {
          Set.empty
        }
{{/isOption}}
{{/isValidationType}}
{{^isValidationType}}
        Set.empty
{{/isValidationType}}
{{/argsWithValidations}}
      if ({{#argsWithValidations}}{{violationArg}}.isEmpty{{/argsWithValidations| && }}) {
        iface.{{methodSvcNameForCompile}}({{argNames}})
      } else {
        iface.{{violationReturningMethodSvcNameForCompile}}({{argNames}}, {{#argsWithValidations}}{{violationArg}}{{/argsWithValidations|, }})
      }
{{/hasValidationAnnotation}}
{{^hasValidationAnnotation}}
      iface.{{methodSvcNameForCompile}}({{argNames}})
{{/hasValidationAnnotation}}
    }
  }

  filters.{{methodSvcNameForCompile}}.andThen(methodService)
})
