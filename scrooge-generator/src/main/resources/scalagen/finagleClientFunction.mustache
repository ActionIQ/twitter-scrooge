private[this] object {{__stats_name}} {
  val RequestsCounter: _root_.com.twitter.finagle.stats.Counter = scopedStats.scope("{{clientFuncNameForWire}}").counter("requests")
  val SuccessCounter: _root_.com.twitter.finagle.stats.Counter = scopedStats.scope("{{clientFuncNameForWire}}").counter("success")
  val FailuresCounter: _root_.com.twitter.finagle.stats.Counter = scopedStats.scope("{{clientFuncNameForWire}}").counter("failures")
  val FailuresScope: StatsReceiver = scopedStats.scope("{{clientFuncNameForWire}}").scope("failures")
}
{{#functionInfo}}
val {{clientFuncNameForWire}}{{ServiceName}}ReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[{{typeName}}] = {
  response: Array[Byte] => {
    decodeResponse(response, {{funcObjectName}}.Result).flatMap { result: {{funcObjectName}}.Result =>
      val firstException = result.firstException()
      if (firstException.isDefined) {
        _root_.com.twitter.util.Throw(_root_.com.twitter.finagle.SourcedException.setServiceName(firstException.get, serviceName))
      } else if (result.successField.isDefined) {
        _root_.com.twitter.util.Return(result.successField.get)
      } else {
        _root_.com.twitter.util.Throw(_root_.com.twitter.scrooge.internal.ApplicationExceptions.missingResult("{{clientFuncNameForWire}}"))
      }
    }
  }
}
{{>function}} = {
  {{__stats_name}}.RequestsCounter.incr()
  val inputArgs = {{funcObjectName}}.Args({{argNames}})
  {{! this is used to store values to be read later, inside the finagle stack }}
  val serdeCtx = new _root_.com.twitter.finagle.thrift.ClientDeserializeCtx[{{typeName}}](inputArgs, {{clientFuncNameForWire}}{{ServiceName}}ReplyDeserializer)
  _root_.com.twitter.finagle.context.Contexts.local.let(
    _root_.com.twitter.finagle.thrift.ClientDeserializeCtx.Key,
    serdeCtx,
    _root_.com.twitter.finagle.thrift.Headers.Request.Key,
    _root_.com.twitter.finagle.thrift.Headers.Request.newValues
  ) {
    serdeCtx.rpcName("{{clientFuncNameForWire}}")
    val start = System.nanoTime
    val serialized = encodeRequest("{{clientFuncNameForWire}}", inputArgs)
    serdeCtx.serializationTime(System.nanoTime - start)
    this.service(serialized).flatMap { response =>
      Future.const(serdeCtx.deserialize(response))
    }.respond { response =>
      val classified = responseClassifier.applyOrElse(
        ctfs.ReqRep(inputArgs, response),
        ctfs.ResponseClassifier.Default)
      if (classified.isInstanceOf[ctfs.ResponseClass.Successful]) {
        {{__stats_name}}.SuccessCounter.incr()
      } else if (classified.isInstanceOf[ctfs.ResponseClass.Failed]) {
        {{__stats_name}}.FailuresCounter.incr()
        if (response.isThrow) {
          _root_.com.twitter.finagle.SourcedException.setServiceName(response.throwable, serviceName)
          {{__stats_name}}.FailuresScope.counter(
            _root_.com.twitter.util.Throwables.mkString(response.throwable): _*).incr()
        }
      } // Last ResponseClass is Ignorable, which we do not need to record
    }
  }
}
{{/functionInfo}}
