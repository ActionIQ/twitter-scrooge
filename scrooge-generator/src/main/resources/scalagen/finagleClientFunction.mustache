private[this] object {{__stats_name}} {
  val RequestsCounter: _root_.com.twitter.finagle.stats.Counter = scopedStats.scope("{{clientFuncNameForWire}}").counter("requests")
  val SuccessCounter: _root_.com.twitter.finagle.stats.Counter = scopedStats.scope("{{clientFuncNameForWire}}").counter("success")
  val FailuresCounter: _root_.com.twitter.finagle.stats.Counter = scopedStats.scope("{{clientFuncNameForWire}}").counter("failures")
  val FailuresScope: StatsReceiver = scopedStats.scope("{{clientFuncNameForWire}}").scope("failures")
}
{{#functionInfo}}
val {{clientFuncNameForWire}}{{ServiceName}}ReplyDeserializer: Array[Byte] => _root_.com.twitter.util.Try[{{typeName}}] = {
  response: Array[Byte] => {
    decodeResponse(response, {{funcObjectName}}.Result).flatMap { result: {{funcObjectName}}.Result =>
      val firstException = result.firstException()
      if (firstException.isDefined) {
        _root_.com.twitter.util.Throw(_root_.com.twitter.finagle.SourcedException.setServiceName(firstException.get, serviceName))
      } else if (result.successField.isDefined) {
        _root_.com.twitter.util.Return(result.successField.get)
      } else {
        _root_.com.twitter.util.Throw(_root_.com.twitter.scrooge.internal.ApplicationExceptions.missingResult("{{clientFuncNameForWire}}"))
      }
    }
  }
}
{{>function}} =
  ClientFunction.serde[{{typeName}}](
    "{{clientFuncNameForWire}}",
    {{clientFuncNameForWire}}{{ServiceName}}ReplyDeserializer,
    {{funcObjectName}}.Args({{argNames}}),
    serviceName,
    service,
    responseClassifier,
    tlReusableBuffer,
    protocolFactory,
    {{__stats_name}}.FailuresScope,
    {{__stats_name}}.RequestsCounter,
    {{__stats_name}}.SuccessCounter,
    {{__stats_name}}.FailuresCounter)

{{/functionInfo}}
