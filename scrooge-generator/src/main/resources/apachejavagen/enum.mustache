{{>autogen}}
{{>package}}

import java.util.Map;
import java.util.HashMap;
import java.util.Collections;
import java.util.EnumMap;
import org.apache.thrift.TEnum;

public enum {{name}} implements TEnum {
  {{#is_passthrough_enum}}
  UnknownPassThrough(-1),
  {{/is_passthrough_enum}}
  {{#constants}}
  {{name}}({{value}}){{#last}};{{/last}}{{^last}},{{/last}}
  {{/constants}}

  {{#is_passthrough_enum}}
  private int value;
  {{/is_passthrough_enum}}
  {{^is_passthrough_enum}}
  private final int value;
  {{/is_passthrough_enum}}

  private {{name}}(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  {{#is_passthrough_enum}}
  /**
   * Set the integer value of this enum value. Used in passthrough
   */
  private void setValue(int value) {
    this.value = value;
  }
  {{/is_passthrough_enum}}

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static {{name}} findByValue(int value) {
    switch (value) {
    {{#constants}}
      case {{value}}:
        return {{name}};
    {{/constants}}
      default:
        {{#is_passthrough_enum}}
        UnknownPassThrough.setValue(value);
        return UnknownPassThrough;
        {{/is_passthrough_enum}}
        {{^is_passthrough_enum}}
        return null;
        {{/is_passthrough_enum}}
    }
  }

  {{#i_2}}{{>generate_java_struct_annotations}}{{/i_2}}
  {{#i_2}}{{>generate_java_enum_value_annotations}}{{/i_2}}
}
