public {{#is_final}}final {{/is_final}}{{#in_class}}static {{/in_class}}class {{name}} extends TUnion<{{name}}, {{name}}._Fields> {
  {{#i_2}}{{>generate_struct_desc}}{{/i_2}}
  {{#i_2}}{{>generate_field_descs}}{{/i_2}}
  {{#i_2}}{{>generate_field_name_constants}}{{/i_2}}
  {{#i_2}}{{>generate_java_meta_data_map}}{{/i_2}}
  {{#i_2}}{{>generate_java_struct_annotations}}{{/i_2}}
  {{#i_2}}{{>generate_java_field_annotations}}{{/i_2}}

  public {{name}}() {
    super();
  }

  public {{name}}(_Fields setField, Object value) {
    super(setField, value);
  }

  public {{name}}({{{struct_type_name}}} other) {
    super(other);
  }

  public static List<String> validateNewInstance({{name}} item) {
    final List<String> buf = new ArrayList<String>();
    final TFieldIdEnum setField = item.getSetField();

    if (setField != null) {
      final short thriftFieldId = setField.getThriftFieldId();
{{#fields}}
{{#field_type.has_struct_at_leaf}}
{{#consolidate_newlines}}
      if ({{key}} == thriftFieldId && (item.isSet(_Fields.{{#constant_name}}{{name}}{{/constant_name}}))) {
        {{{field_type.type_name_in_container}}} _{{name}} = ({{{field_type.type_name_in_container}}})item.getFieldValue();
{{#field_type.is_container}}
        {{{generate_deep_validate_container}}}
{{/field_type.is_container}}
{{^field_type.is_container}}
        {{{generate_deep_validate_non_container}}}
{{/field_type.is_container}}
      }
{{/consolidate_newlines}}

{{/field_type.has_struct_at_leaf}}
{{/fields}}
    } else {
      buf.add("No fields set for union type '{{struct_type_name}}'.");
    }
    return buf;
  }

  public static Set<ThriftValidationViolation> validateInstanceValue({{name}} item) {
    final Set<ThriftValidationViolation> violations = new HashSet<ThriftValidationViolation>();
    _Fields field = item.getSetField();
    Map<String, String> annotations = fieldAnnotations.get(field);
    if (annotations != null) {
      final BaseValidator validator = {{validator}};
      violations.addAll(validator.validateField(field.getFieldName(), item.getFieldValue(), annotations));
{{#has_validator}}
      // when a custom validator is specified, we need to perform default validations following custom validations
      violations.addAll(new UtilValidator().validateField(field.getFieldName(), item.getFieldValue(), annotations));
{{/has_validator}}
    }
{{#field_type.is_struct}}
{{!Use a fully qualified name here in case there is a field with the same name as this type}}
    violations.addAll({{{field_type.qualified_type_name}}}.validateInstanceValue(field{{name}}));
{{/field_type.is_struct}}

    return violations;
  }

  public {{name}} deepCopy() {
    return new {{name}}(this);
  }

  {{#fields}}
  public static {{{struct_type_name}}} {{name}}({{{field_type.type_name}}} value) {
    {{{struct_type_name}}} x = new {{{struct_type_name}}}();
    x.set{{#cap}}{{name}}{{/cap}}(value);
    return x;
  }
  {{/fields}}

  @java.lang.Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      {{#fields}}
      case {{#constant_name}}{{name}}{{/constant_name}}:
        if (value instanceof {{{field_type.type_name_in_container_skip_generic}}}) {
          break;
        }
        throw new ClassCastException("Was expecting value of type {{{field_type.type_name_in_container}}} for field '{{name}}', but got " + value.getClass().getSimpleName());
      {{/fields}}
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @java.lang.Override
  protected Object standardSchemeReadValue(TProtocol iprot, TField field) throws TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        {{#fields}}
        case {{#constant_name}}{{name}}{{/constant_name}}:
          if (field.type == {{#constant_name}}{{name}}{{/constant_name}}_FIELD_DESC.type) {
            {{{field_type.type_name_in_container}}} {{name}};
            {{{deserialize_field}}}
            return {{name}};
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        {{/fields}}
        {{#is_passthrough_union}}
        case UNKNOWN_PASSTHROUGH:
          if (field.type != TType.STOP) {
            return TFieldBlob.extractBlob(field, iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        {{/is_passthrough_union}}
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @java.lang.Override
  protected void standardSchemeWriteValue(TProtocol oprot) throws TException {
    switch (setField_) {
      {{#fields}}
      case {{#constant_name}}{{name}}{{/constant_name}}:
        {{{field_type.type_name_in_container}}} {{name}} = ({{{field_type.type_name_in_container}}})value_;
        {{{serialize_field}}}
        return;
      {{/fields}}
      {{#is_passthrough_union}}
      case UNKNOWN_PASSTHROUGH:
        TFieldBlob tFieldBlob = (TFieldBlob)value_;
        tFieldBlob.writeWithoutFieldMeta(oprot);
        return;
      {{/is_passthrough_union}}
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @java.lang.Override
  protected Object tupleSchemeReadValue(TProtocol iprot, short fieldID) throws TException {
    throw new UnsupportedOperationException("tuple scheme not implemented");
  }

  @java.lang.Override
  protected void tupleSchemeWriteValue(TProtocol oprot) throws TException {
    throw new UnsupportedOperationException("tuple scheme not implemented");
  }

  @java.lang.Override
  protected TField getFieldDesc(_Fields setField) {
    switch (setField) {
      {{#fields}}
      case {{#constant_name}}{{name}}{{/constant_name}}:
        return {{#constant_name}}{{name}}{{/constant_name}}_FIELD_DESC;
      {{/fields}}
      {{#is_passthrough_union}}
      case UNKNOWN_PASSTHROUGH:
        TFieldBlob tFieldBlob = (TFieldBlob)value_;
        return tFieldBlob.field();
      {{/is_passthrough_union}}
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @java.lang.Override
  protected TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @java.lang.Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  {{#i_2}}{{>generate_java_struct_field_by_id}}{{/i_2}}

  {{#fields}}
  public {{{field_type.type_name}}} get{{#cap}}{{name}}{{/cap}}() {
    if (getSetField() == _Fields.{{#constant_name}}{{name}}{{/constant_name}}) {
      return ({{{field_type.type_name_in_container}}})getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field '{{name}}' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void set{{#cap}}{{name}}{{/cap}}({{{field_type.type_name}}} value) {
    {{#field_type.nullable}}
    if (value == null) throw new NullPointerException();
    {{/field_type.nullable}}
    setField_ = _Fields.{{#constant_name}}{{name}}{{/constant_name}};
    value_ = value;
  }
  {{/fields}}

  public boolean equals(Object other) {
    if (other instanceof {{name}}) {
      return equals(({{name}})other);
    } else {
      return false;
    }
  }

  public boolean equals({{name}} other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @java.lang.Override
  public int compareTo({{{struct_type_name}}} other) {
    int lastComparison = TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }

  {{^gen_hash_code}}
    /**
    * If you'd like this to perform more respectably, use the hashcode generator option.
    */
  {{/gen_hash_code}}
  @java.lang.Override
  public int hashCode() {
  {{#gen_hash_code}}
    int hashCode = this.getClass().getName().hashCode();
    TFieldIdEnum setField = getSetField();

    if (setField != null) {
      final short thriftFieldId = setField.getThriftFieldId();
      hashCode = hashCode * 31 + thriftFieldId;
      Object value = getFieldValue();

      {{#fields}}
      {{#field_type.is_enum}}
      if (value instanceof TEnum) {
        hashCode = 31 * hashCode + ((Integer)((TEnum)value).getValue()).hashCode();
      }
      {{/field_type.is_enum}}
      {{^field_type.is_enum}}
      if ({{key}} == thriftFieldId{{#optional_or_nullable}} && (isSet(_Fields.{{#constant_name}}{{name}}{{/constant_name}})){{/optional_or_nullable}}) {
        hashCode = 31 * hashCode + (({{{field_type.type_name_in_container}}})value).hashCode();
      }
      {{/field_type.is_enum}}
      {{/fields}}
      {{#is_passthrough_union}}
      if (_Fields.UNKNOWN_PASSTHROUGH._thriftId == thriftFieldId) {
        hashCode = 31 * hashCode + ((TFieldBlob)value).hashCode();
      }
      {{/is_passthrough_union}}
    }
    return hashCode;
  {{/gen_hash_code}}
  {{^gen_hash_code}}
    return 0;
  {{/gen_hash_code}}
  }
}
